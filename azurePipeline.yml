# This pipeline should be triggered by every local branches, but should not be used for external PRs.
# In fact, this pipeline is able to use some of our secrets to push images on dockerhub and deploy on k8s.
pr: none
trigger:
  branches:
    include:
    - '*'


stages:
- stage: wheels
  displayName: Build Wheel Packages
  variables:
    CIBW_TEST_REQUIRES: 'pytest pytest-cov pytest-timeout hypothesis codecov'
    CIBW_TEST_COMMAND: 'pytest {project}/tests --cov={project} --junitxml={project}/testoutput.xml --cov-report=xml:{project}/coverage.xml -k "test_similarity_dice or test_solving" -W ignore::DeprecationWarning'
    CIBW_BEFORE_BUILD: 'python -m pip install --upgrade pip && pip install -e .'
    # Need to install development libraries for manylinux container
    CIBW_BEFORE_BUILD_LINUX: 'yum install -y libffi-devel atlas-devel && pip install -e .'

    # Only build for Python36+, and x64 arch
    CIBW_BUILD: 'cp37-* cp36-*'
    CIBW_SKIP: '*-win32 *-manylinux1_i686'
  jobs:
  - job: linux_37
    displayName: Linux + Python3.7
    pool: {vmImage: 'Ubuntu-16.04'}
    variables:
      CIBW_BUILD: 'cp37-*'
    steps:
    - template: .azurePipeline/cibuildwheel_steps.yml
  - job: linux_36
    displayName: Linux + Python3.6
    pool: {vmImage: 'Ubuntu-16.04'}
    variables:
      CIBW_BUILD: 'cp36-*'
    steps:
    - template: .azurePipeline/cibuildwheel_steps.yml

  - job: macos_37
    displayName: MacOS + Python3.7
    pool: {vmImage: 'macOS-10.13'}
    variables:
      CIBW_BUILD: 'cp37-*'
    steps:
    - template: .azurePipeline/cibuildwheel_steps.yml

  - job: macos_36
    displayName: MacOS + Python3.6
    pool: {vmImage: 'macOS-10.13'}
    variables:
      CIBW_BUILD: 'cp36-*'
    steps:
    - template: .azurePipeline/cibuildwheel_steps.yml


- stage: test
  displayName: Unittests
  dependsOn: ['wheels']
  jobs:
  - job:
    displayName: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python3.6:
          pythonVersion: '3.6'
          artifactName: 'wheels.linux36'
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.linux37'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'ubuntu-16.04'
  - job:
    displayName: MacOS
    pool:
      vmImage: 'macOS-10.13'
    strategy:
      matrix:
        Python3.6:
          pythonVersion: '3.6'
          artifactName: 'wheels.macos36'
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.macos37'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'macOS-10.13'

- stage: static_checks
  displayName: Static Checks
  dependsOn: []
  jobs:
  - job:
    displayName: Typecheck
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
      - script: pip install -U mypy
      - script: mypy anonlink --ignore-missing-imports
        displayName: mypy
