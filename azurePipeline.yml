# This pipeline should be triggered by every local branches, but should not be used for external PRs.
# In fact, this pipeline is able to use some of our secrets to push images on dockerhub and deploy on k8s.
pr: none
trigger:
  branches:
    include:
    - '*'


stages:
- stage: wheels
  displayName: Build Wheel Packages
  variables:
    # Need to install development libraries for manylinux container
    CIBW_BEFORE_BUILD_LINUX: 'yum install -y libffi-devel atlas-devel'
    # Only build for Python36+, and x64 arch
    CIBW_BUILD: 'cp38-* cp37-* cp36-*'
    CIBW_SKIP: '*-win32 *-manylinux_i686'
  jobs:
  - job: linux_38
    displayName: Linux + Python3.8
    pool: {vmImage: 'Ubuntu-16.04'}
    variables:
      CIBW_BUILD: 'cp38-*'
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
      - template: .azurePipeline/cibuildwheel_steps.yml
  - job: linux_37
    displayName: Linux + Python3.7
    pool: {vmImage: 'Ubuntu-16.04'}
    variables:
      CIBW_BUILD: 'cp37-*'
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
      - template: .azurePipeline/cibuildwheel_steps.yml
  - job: linux_36
    displayName: Linux + Python3.6
    pool: {vmImage: 'Ubuntu-16.04'}
    variables:
      CIBW_BUILD: 'cp36-*'
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
      - template: .azurePipeline/cibuildwheel_steps.yml
  - job: macos
    displayName: MacOS
    pool: {vmImage: 'macOS-10.14'}
    variables:
      MACOSX_DEPLOYMENT_TARGET: '10.14'
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
      - template: .azurePipeline/cibuildwheel_steps.yml
  - job: windows
    displayName: Windows
    pool: {vmImage: 'vs2017-win2016'}
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
      - template: .azurePipeline/cibuildwheel_steps.yml

- stage: test
  displayName: Unit tests
  dependsOn: ['wheels']
  jobs:
  - job:
    displayName: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python3.6:
          pythonVersion: '3.6'
          artifactName: 'wheels.linux36'
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.linux37'
        Python3.8:
          pythonVersion: '3.8'
          artifactName: 'wheels.linux38'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'ubuntu-16.04'
  - job:
    displayName: MacOS
    pool:
      vmImage: 'macOS-10.14'
    strategy:
      matrix:
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.macos'
          artifactPattern: '**/*cp37*.whl'
        Python3.8:
          pythonVersion: '3.8'
          artifactName: 'wheels.macos'
          artifactPattern: '**/*cp38*.whl'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          artifactPattern: $(artifactPattern)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'macOS-10.14'
  - job:
    displayName: Windows
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Python3.6:
          pythonVersion: '3.6'
          artifactName: 'wheels.windows'
          artifactPattern: '**/*cp36m*.whl'
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.windows'
          artifactPattern: '**/*cp37m*.whl'
        Python3.8:
          pythonVersion: '3.8'
          artifactName: 'wheels.windows'
          artifactPattern: '**/*cp38*.whl'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          artifactPattern: $(artifactPattern)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'vs2017-win2016'

- stage: static_checks
  displayName: Static Checks
  dependsOn: []
  jobs:
  - job:
    displayName: Typecheck
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
      - script: pip install -U mypy
      - script: mypy anonlink --ignore-missing-imports
        displayName: mypy

- stage: publish
  displayName: Publish packages to test feed
  dependsOn: ['test']
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      # the name of an Azure artifacts feed to publish artifacts to
      artifactFeed: anonlink
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
      - script: 'pip install twine'
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: 'drop'
          patterns: '**/*.whl'
          path: $(Pipeline.Workspace)
      - task: TwineAuthenticate@1
        inputs:
          artifactFeed: $(artifactFeed)
      - script: 'twine upload -r $(artifactFeed) --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/*.whl --skip-existing'
