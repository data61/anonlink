trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - v*

stages:
- stage: wheels
  displayName: Build Wheel Packages
  variables:
    # Need to install development libraries for manylinux container
    CIBW_BEFORE_BUILD_LINUX: 'apt install -y libffi-dev atlas-dev'
    # Only build for Python36+, and x64 arch
    CIBW_BUILD: 'cp310-* cp39-* cp38-* cp37-* cp36-*'
    CIBW_SKIP: '*-win32 *-manylinux_i686'
  jobs:
    - job: linux_310
      displayName: Linux + Python3.10
      pool:
        vmImage: 'ubuntu-20.04'
      variables:
        CIBW_BUILD: 'cp310-*'
      steps:
        - { task: UsePythonVersion@0, inputs: { versionSpec: '3.10', architecture: x64 } }
        - template: .azurePipeline/cibuildwheel_steps.yml
    - job: linux_39
      displayName: Linux + Python3.9
      pool:
        vmImage: 'ubuntu-20.04'
      variables:
        CIBW_BUILD: 'cp39-*'
      steps:
        - { task: UsePythonVersion@0, inputs: { versionSpec: '3.9', architecture: x64 } }
        - template: .azurePipeline/cibuildwheel_steps.yml
    - job: linux_38
      displayName: Linux + Python3.8
      pool:
        vmImage: 'ubuntu-20.04'
      variables:
        CIBW_BUILD: 'cp38-*'
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
        - template: .azurePipeline/cibuildwheel_steps.yml
    - job: linux_37
      displayName: Linux + Python3.7
      pool:
        vmImage: 'ubuntu-20.04'
      variables:
        CIBW_BUILD: 'cp37-*'
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
        - template: .azurePipeline/cibuildwheel_steps.yml
    - job: linux_36
      displayName: Linux + Python3.6
      pool:
        vmImage: 'ubuntu-20.04'
      variables:
        CIBW_BUILD: 'cp36-*'
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
        - template: .azurePipeline/cibuildwheel_steps.yml
    - job: macos
      displayName: MacOS
      pool:
        vmImage: 'macOS-10.15'
      variables:
        MACOSX_DEPLOYMENT_TARGET: '10.15'
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.9', architecture: x64}}
        - template: .azurePipeline/cibuildwheel_steps.yml
    - job: windows
      displayName: Windows
      pool:
        vmImage: 'windows-2019'
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.9', architecture: x64}}
        - template: .azurePipeline/cibuildwheel_steps.yml

- stage: sdist
  displayName: Build source distribution
  dependsOn: []
  jobs:
    - job: sdist
      displayName: build source distribution
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.9'
        - script: |
            python setup.py sdist
          displayName: 'Artifact creation'
        - task: CopyFiles@2
          inputs:
            targetFolder: 'sdist'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: 'sdist/dist'
            ArtifactName: 'drop'

- stage: test
  displayName: Unit tests
  dependsOn: ['wheels']
  jobs:
  - job:
    displayName: Linux
    pool:
      vmImage: 'ubuntu-20.04'
    strategy:
      matrix:
        Python3.6:
          pythonVersion: '3.6'
          artifactName: 'wheels.linux36'
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.linux37'
        Python3.8:
          pythonVersion: '3.8'
          artifactName: 'wheels.linux38'
        Python3.9:
          pythonVersion: '3.9'
          artifactName: 'wheels.linux39'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'ubuntu-20.04'
  - job:
    displayName: MacOS
    pool:
      vmImage: 'macOS-10.15'
    strategy:
      matrix:
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.macos'
          artifactPattern: '**/*cp37*.whl'
        Python3.8:
          pythonVersion: '3.8'
          artifactName: 'wheels.macos'
          artifactPattern: '**/*cp38*.whl'
        Python3.9:
          pythonVersion: '3.9'
          artifactName: 'wheels.macos'
          artifactPattern: '**/*cp39*.whl'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          artifactPattern: $(artifactPattern)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'macOS-10.15'
  - job:
    displayName: Windows
    pool:
      vmImage: 'windows-2019'
    strategy:
      matrix:
        Python3.6:
          pythonVersion: '3.6'
          artifactName: 'wheels.windows'
          artifactPattern: '**/*cp36m*.whl'
        Python3.7:
          pythonVersion: '3.7'
          artifactName: 'wheels.windows'
          artifactPattern: '**/*cp37m*.whl'
        Python3.8:
          pythonVersion: '3.8'
          artifactName: 'wheels.windows'
          artifactPattern: '**/*cp38*.whl'
        Python3.9:
          pythonVersion: '3.9'
          artifactName: 'wheels.windows'
          artifactPattern: '**/*cp39*.whl'
    steps:
      - template: .azurePipeline/unittest_wheel_steps.yml
        parameters:
          artifactName: $(artifactName)
          artifactPattern: $(artifactPattern)
          pythonVersion: $(pythonVersion)
          operatingSystem: 'windows-2019'

- stage: static_checks
  displayName: Static Checks
  dependsOn: []
  jobs:
  - job:
    displayName: Typecheck
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'
      - script: pip install -U mypy types-setuptools
      - script: mypy anonlink --ignore-missing-imports
        displayName: mypy
  - job:
    displayName: "check for and tag release"
    steps:
      # In this step, if this build is triggered by a tag, it will add a tag 'doRelease' to the current build.
      # This tag in turn is used as a trigger for the release pipeline.
      - script: echo "##vso[build.addbuildtag]doRelease"
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

- stage: publish
  displayName: Publish packages to test feed
  dependsOn: ['test']
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      # the name of an Azure artifacts feed to publish artifacts to
      artifactFeed: anonlink
    steps:
      - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
      - script: 'pip install twine'
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: 'drop'
          patterns: '**/*.@(whl|tar.gz)'
          path: $(Pipeline.Workspace)
      - task: TwineAuthenticate@1
        inputs:
          artifactFeed: $(artifactFeed)
      - script: 'echo $(Build.Repository.Name)'
      - script: 'echo $(Build.SourceBranchName)'
      - script: 'twine upload -r $(artifactFeed) --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/*.whl --skip-existing'
      - script: 'twine upload -r $(artifactFeed) --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/*.tar.gz --skip-existing'
